# CloudFormation output name: `sls-${SERVICE_NAME}-${STAGE}`
service: sls-${self:custom.service}

package:
  include:
    # Root level
    - "!*"
    - "package.json"
    # Source directories
    - "src/**"
    - "!aws/**"
    - "!terraform"
    - "!terraform/**"
    # General exclusions
    - "!**/.DS_Store"
    # Dependencies
    - "!node_modules/aws-sdk"
    - "!node_modules/aws-sdk/**"
    - "!**/node_modules/aws-sdk"
    - "!**/node_modules/aws-sdk/**"
    - "!**/node_modules/*/CHANGELOG.md"
    - "!**/node_modules/*/HISTORY.md"
    - "!**/node_modules/*/LICENSE"
    - "!**/node_modules/*/README.md"

custom:
  service: ${env:SERVICE_NAME}
  region: ${opt:region, env:AWS_REGION}
  stage: ${opt:stage, env:STAGE}

plugins:
  # TODO: REENABLE - serverless-jetpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  environment:
    STAGE: ${self:custom.stage}
    SERVICE_NAME: ${self:custom.service}
  timeout: 30 # seconds (`300` max)
  memorySize: 128 # MB value (`1024` default)

# SCENARIO(EXPERIMENT): Layers!
layers:
  figlet:
    path: layers/figlet
    package:
      exclude:
        - "**/yarn.lock"

functions:
  # SCENARIO - base: The simplest, vanilla Serverless app.
  base:
    handler: src/server/base.handler
    events: # Use a generic proxy to allow Express app to route.
      - http: ANY /base
      - http: 'ANY /base/{proxy+}'

  # SCENARIO - xray: Simple app with Xray tracing.
  xray:
    handler: src/server/xray.handler
    events:
      - http: ANY /xray
      - http: 'ANY /xray/{proxy+}'

  # SCENARIO(EXPERIMENT): Layers!
  #
  # **Localdev**:
  # ```sh
  # # Can't find deps
  # $ STAGE=sandbox yarn lambda:localdev
  # $ curl http://127.0.0.1:3001/layers/layers.txt
  #   Could not import figlet via layers. Sorry, no ASCII art today... :(
  #
  # # Hack in deps sort-of-equivalent to deployed.
  # $ NODE_PATH="${NODE_PATH}:./layers/figlet/nodejs/node_modules" STAGE=sandbox yarn lambda:localdev
  # $ curl http://127.0.0.1:3001/layers/layers.txt
  #  _   _      _ _         _                              _ _ _
  # | | | | ___| | | ___   | |    __ _ _   _  ___ _ __ ___| | | |
  # | |_| |/ _ \ | |/ _ \  | |   / _` | | | |/ _ \ '__/ __| | | |
  # |  _  |  __/ | | (_) | | |__| (_| | |_| |  __/ |  \__ \_|_|_|
  # |_| |_|\___|_|_|\___/  |_____\__,_|\__, |\___|_|  |___(_|_|_)
  #                                    |___/
  # ```
  layers:
    handler: src/server/base.handler
    events:
      - http: ANY /layers
      - http: 'ANY /layers/{proxy+}'
    environment:
      BASE_URL: /layers
    layers:
      - { Ref: FigletLambdaLayer }

  # SCENARIO - vpc: Our vanilla app, but in a VPC
  vpc:
    handler: src/server/base.handler
    events:
      - http: ANY /vpc
      - http: 'ANY /vpc/{proxy+}'
    environment:
      BASE_URL: /vpc
    # VPC: Add in SGs and SNs.
    # https://serverless.com/framework/docs/providers/aws/guide/functions#vpc-configuration
    vpc:
      securityGroupIds:
        - Fn::ImportValue: "tf-${self:custom.service}-${self:custom.stage}-VPCSecurityGroupId"
      subnetIds:
        - Fn::ImportValue: "tf-${self:custom.service}-${self:custom.stage}-VPCPrivateSubnetA"
        - Fn::ImportValue: "tf-${self:custom.service}-${self:custom.stage}-VPCPrivateSubnetB"

resources:
  Resources:
    # OPTION(Xray): Enable Xray tracing.
    XrayLambdaFunction:
      Properties:
        TracingConfig:
          Mode: Active
