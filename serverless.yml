# CloudFormation output name: `sls-${SERVICE_NAME}-${STAGE}`
service: sls-${self:custom.service}

package:
  include:
    # Root level
    - "!*"
    - "package.json"
    # Source directories
    - "src/**"
    - "!.*/**"
    - "!aws/**"
    - "!terraform/**"
    # General exclusions
    - "!**/.DS_Store"
    - "!**/yarn.lock"
    - "!**/package-lock.json"
    - "!**/node_modules/.yarn-integrity"
    - "!**/node_modules/.cache/**"
    # Dependencies
    - "!**/node_modules/aws-sdk/**"
    - "!**/node_modules/{@*/*,*}/CHANGELOG.md"
    - "!**/node_modules/{@*/*,*}/HISTORY.md"
    - "!**/node_modules/{@*/*,*}/LICENSE"
    - "!**/node_modules/{@*/*,*}/README.md"

custom:
  service: ${env:SERVICE_NAME}
  region: ${opt:region, env:AWS_REGION}
  stage: ${opt:stage, env:STAGE}

plugins:
  - serverless-jetpack
  - serverless-offline
  - serverless-plugin-canary-deployments

provider:
  name: aws
  # Required: import the default role that terraform-aws-serverless generates.
  role:
    Fn::ImportValue: tf-${self:custom.service}-${self:custom.stage}-LambdaExecutionRoleArn

    # OPTION(custom_role): terraform-aws-serverless lets you provide a custom
    # IAM role in place of its autogenerated one. If you provide a custom role,
    # expose it as an export on a CloudFormation stack and import it like so:
    # Fn::ImportValue: tf-${self:custom.service}-${self:custom.stage}-LambdaExecutionRoleCustomArn
  runtime: nodejs8.10
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  environment:
    STAGE: ${self:custom.stage}
    SERVICE_NAME: ${self:custom.service}
  timeout: 30 # seconds (`300` max)
  memorySize: 128 # MB value (`1024` default)

functions:
  # SCENARIO - base: The simplest, vanilla Serverless app.
  base:
    handler: src/server/base.handler
    events: # Use a generic proxy to allow Express app to route.
      - http: ANY /base
      - http: 'ANY /base/{proxy+}'

###############################################################################
# OPTIONAL STUFF BELOW!!!
# =======================
# Everything below here provides specific features and enhancements that you
# may wish to investigate in a serverless app, such as:
# - `xray`: Set up AWS Xray tracing
# - `vpc`: Deploy Lambda in AWS VPC
# - `layers`: Deploy Lambda Layers alongside Lambda Functions
###############################################################################

  #############################################################################
  # OPTION(xray): Simple app with Xray tracing.
  #############################################################################
  xray:
    handler: src/server/xray.handler
    events:
      - http: ANY /xray
      - http: 'ANY /xray/{proxy+}'

  #############################################################################
  # OPTION(vpc): Our vanilla app, but in a VPC
  #############################################################################
  vpc:
    handler: src/server/base.handler
    events:
      - http: ANY /vpc
      - http: 'ANY /vpc/{proxy+}'
    environment:
      BASE_URL: /vpc
    # VPC: Add in SGs and SNs.
    # https://serverless.com/framework/docs/providers/aws/guide/functions#vpc-configuration
    vpc:
      securityGroupIds:
        - Fn::ImportValue: "tf-${self:custom.service}-${self:custom.stage}-VPCSecurityGroupId"
      subnetIds:
        - Fn::ImportValue: "tf-${self:custom.service}-${self:custom.stage}-VPCPrivateSubnetA"
        - Fn::ImportValue: "tf-${self:custom.service}-${self:custom.stage}-VPCPrivateSubnetB"

  #############################################################################
  # OPTION(canary): Canary-deployed Lambda using serverless-plugin-canary-deployments
  ############################################################################
  canary:
    handler: src/server/base.handler
    events: # Use a generic proxy to allow Express app to route.
      - http: ANY /canary
      - http: 'ANY /canary/{proxy+}'
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live

  #############################################################################
  # OPTION(layers): Conditional import can use code from a layer.
  #
  # **Localdev**:
  # ```sh
  # # Can't find deps
  # $ STAGE=sandbox yarn lambda:localdev
  # $ curl http://127.0.0.1:3001/layers/layers.txt
  #   Could not import figlet via layers. Sorry, no ASCII art today... :(
  #
  # # Hack in deps sort-of-equivalent to deployed.
  # $ NODE_PATH="${NODE_PATH}:./layers/vendor/nodejs/node_modules" STAGE=sandbox yarn lambda:localdev
  # $ curl http://127.0.0.1:3001/layers/layers.txt
  #  _   _      _ _         _                              _ _ _
  # | | | | ___| | | ___   | |    __ _ _   _  ___ _ __ ___| | | |
  # | |_| |/ _ \ | |/ _ \  | |   / _` | | | |/ _ \ '__/ __| | | |
  # |  _  |  __/ | | (_) | | |__| (_| | |_| |  __/ |  \__ \_|_|_|
  # |_| |_|\___|_|_|\___/  |_____\__,_|\__, |\___|_|  |___(_|_|_)
  #                                    |___/
  # ```
  #############################################################################
  layers:
    handler: src/server/layers.handler
    events:
      - http: ANY /layers
      - http: 'ANY /layers/{proxy+}'
    environment:
      BASE_URL: /layers
    layers:
      - { Ref: VendorLambdaLayer }
      - { Ref: RepeatLambdaLayer }

###############################################################################
# OPTION(layers): Add some layers.
###############################################################################
layers:
  # Dependencies: Adds common vendor libs to a `node_modules` directory.
  # Note: Expands to `/opt/nodejs/node_modules/**/*.js`, so should only do this once.
  vendor:
    path: layers/vendor
    name: sls-${self:custom.service}-${self:custom.stage}-vendor
    jetpack:
      roots:
        - layers/vendor/nodejs

  # No dependencies: A vanilla JS function.
  # Note: Expands to `/opt/repeat/*.js` (we have `layers/repeat/repeat` here).
  repeat:
    path: layers/repeat
    name: sls-${self:custom.service}-${self:custom.stage}-repeat
    package:
      include:
        - "*.js"

resources:
  Resources:
    ###########################################################################
    # OPTION(Xray): Enable Xray tracing.
    ###########################################################################
    XrayLambdaFunction:
      Properties:
        TracingConfig:
          Mode: Active
