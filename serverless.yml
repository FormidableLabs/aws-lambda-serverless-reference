# CloudFormation output name: `sls-${SERVICE_NAME}-${STAGE}`
service: sls-${self:custom.service}

package:
  include:
    # Root level
    - "!*"
    - "package.json"
    # Source directories
    - "src/**"
    - "!.*/**"
    - "!aws/**"
    - "!terraform/**"
    # General exclusions
    - "!**/.DS_Store"
    - "!**/yarn.lock"
    - "!**/node_modules/.yarn-integrity"
    - "!**/node_modules/.cache/**"

custom:
  service: ${env:SERVICE_NAME}
  region: ${opt:region, env:AWS_REGION}
  stage: ${opt:stage, env:STAGE}
  jetpack:
    package:
      preInclude:


plugins:
  - serverless-jetpack
  - serverless-offline

provider:
  name: aws

  # Required: import the default role that terraform-aws-serverless generates.
  role:
    Fn::ImportValue: tf-${self:custom.service}-${self:custom.stage}-LambdaExecutionRoleArn

  # Lambda configuration
  runtime: nodejs12.x
  timeout: 30 # seconds (`300` max)
  memorySize: 128 # MB value (`1024` default)

  # Deployment / environment configuration
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  environment:
    STAGE: ${self:custom.stage}
    SERVICE_NAME: ${self:custom.service}

  # AWS Resource Tags: Match terraform module
  stackTags: # For CF stack
    Stage: ${self:custom.stage}
    Service: ${self:custom.service}
  tags: # For resources
    Stage: ${self:custom.stage}
    Service: ${self:custom.service}

functions:
  # SCENARIO - base: The simplest, vanilla Serverless app.
  base:
    handler: src/server/base.handler
    events: # Use a generic proxy to allow Express app to route.
      - http: ANY /base
      - http: 'ANY /base/{proxy+}'
